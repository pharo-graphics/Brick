!Moldable editor!!Overview!!!ScalabilityThe moldable editor is both flexible and scalable. For example, the following piece is a sizeable 2MB of text, and yet it opens smoothly.==example=BrTextEditorExamples>>#newText|noCode=true|expanded=true|show=gtTextIn:==!!!Syntax highlighting and adornmentsAn obvious application for the text editor is a code editor with syntax highlighting.==example=BrTextEditorExamples>>#elementOnMethodWithSyntaxHighlighting|expanded=true|noCode=true|show=gtLiveIn:==Like in any other text editor that supports syntax highlighting, the syntax highlighter works in a separate process and changes the existing text. Typically, the syntax highlighting affects text attributes such as color or font weight. However, the moldable editor brings this concept further and allows us to add arbitrary visual elements to a text scene.For example, in the snippet below, we see the code associated with the example that produces the editor element with syntax highlighting seen above. In addition to the typical Pharo syntax highlighting, we can also notice small triangles inserted in the code. These triangles denote a dependency to another example method, and clicking on one expands the code in place showing another editor.==example=BrTextEditorExamples>>#elementOnMethodWithSyntaxHighlighting|expanded=true|show=gtLiveIn:==This functionality is obtained through a dedicated syntax highlighter that extends the default Pharo highlighting with an extra logic that adds the triangles as adornments. Clicking on such an adornment adds another adornment with another editor element. Interestingly, this all happens live, which means that if you change the code from the root editor element to no longer refer to an example, the corresponding triangle and embedded editor elements will dissappear. The example above also reveals the way to initialize an editor element.!!Applications!!!GT TranscriptDue to its rich abilities, the moldable editor has the potential of changing all tools that rely on textual representations. One such a tool is the Transcript.==example=GtTranscriptExamples>>#completeAPI|expanded=true|show=gtLiveIn:==@@todo more!!!GT ConnectorIn the Overview section, we saw how examples dependencies can be expanded in place by utilizing the syntax highlighter. Connector brings this a step further and proposes a new kind of interface that allows the user to expand a new editor for an example and to automatically connect editor elements with one another.==example=GtConnectorExamples>>#oneExampleMethod|noCode=true|expanded=true|show=gtLiveIn:==The interface is somewhat similar to the one proposed by Code Bubbles, but it has two key differences:# the lines connect an element inside the text editor to the outside world. This is possible because the text is represented as elements that are rendered in the main rendering tree provided by the underlying Bloc framework.# the lines are added automatically to reveal dependencies that are otherwise more difficult to spot.!!!GT DocumenterDocumenter is a renderer and editor of the Pillar markdown language. This very document is written in Pillar and can be rendered with Documenter to show rich interactive visuals where the examples are embedded. Using this mechanism, we can reuse examples in the context of documentation. As examples also constitute the unit of testing effort, it follows that through Documenter we can exploit the same effort for documentation purposes as well.!!Implementation details!!!Elements structureLet us consider the following example:==example=BrRopeExamples>>#textWithAttributes|expanded=true|show=gtTextIn:==In this example, we insert a new line and two pieces of text in an original one, and we set text attributes to two portions. @@todo embed example with a piece of text with words rotated by degrees ==example=GtMondrianDomainExamples>>#editorElements|noCode=true|expanded=true|show=gtLiveIn:==!!!The underlying Rope data structureThe resulting Rope data structure behind it looks as follows:==example=BrRopeExamples>>#textWithAttributes|expanded=true|noCode=true|show=gtRopeTreeIn:==